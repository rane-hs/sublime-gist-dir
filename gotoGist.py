import sublime
import sublime_plugin
import sys
import os
import json
import datetime

py3k = sys.version_info >= (3, 0)
py2k = sys.version_info < (3, 0)

if py3k:
    from urllib import (request, parse)
    _urlopen = request.urlopen
    _Request = request.Request
    _urlencode = parse.urlencode
else:
    import urllib2
    import urllib
    _urlopen = urllib2.urlopen
    _Request = urllib2.Request
    _urlencode = urllib.urlencode
from . import desktop

settings = sublime.load_settings('gotogist.sublime-settings')


class gotogist(sublime_plugin.TextCommand):
    _DESCRIPTION = 'this is auto-generated by GotoGist'

    def _loadconfig(self):
        self._api_endpoint = settings.get('api_endpoint', 'gist.github.com')
        self._auth_token = settings.get('auth_token', '')
        self._username = settings.get('user_name', '')

    def getEncoding(self):
        encoding = self.view.encoding()
        if encoding == 'Undefined':
            return 'utf-8'
        elif encoding == 'Western (Windows 1252)':
            return 'windows-1252'
        else:
            return encoding

    def process_filename(self, current_file):
        if not current_file:
            return "tempfile-" + datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return os.path.basename(current_file)

    @property
    def auth_header(self):
        return {'Authorization': 'token {}'.format(self._auth_token)}

    @property
    def my_gists_url(self):
        return "{}/users/{}/gists".format(self._api_endpoint, self._username)

    def apiurl(self, api):
        return "{}{}".format(self._api_endpoint, api)

    def append_file(self, gist_id, file_name, content):
        params = json.dumps({
            "files": {
                file_name: {
                    "content": content.decode('utf-8')
                }
            }
        })
        request = _Request(self.apiurl('/gists/{}'.format(gist_id)),
                           headers=self.auth_header, data=params.encode('utf-8'))
        response = _urlopen(request)
        if response.status == 201:
            response = _urlopen(request).read()
            return json.loads(response.decode('utf8'))
        else:
            return None

    def create_initial_gist(self):
        params = json.dumps({
            "description": self._DESCRIPTION,
            "public": False,
            "files": {
                "0000-file.md": {
                    "content": "this is test markdown"
                }
            }
        })
        request = _Request(self.apiurl('/gists'),
                           headers=self.auth_header, data=params.encode('utf-8'))
        response = _urlopen(request)
        if response.status == 201:
            response = _urlopen(request).read()
            return json.loads(response.decode('utf8'))
        else:
            return None

    def _get_gists(self):
        request = _Request(self.my_gists_url, headers=self.auth_header)
        response = _urlopen(request).read()
        return json.loads(response.decode('utf8'))

    def _prepare(self):
        _gists = self._get_gists()
        descriptions = [x['description'] for x in _gists]
        target_gist = None
        if self._DESCRIPTION not in descriptions:
            _gists = self.create_initial_gist()
        for single_gist in _gists:
            if single_gist['description'] == self._DESCRIPTION:
                target_gist = single_gist

        return target_gist

    def goto_gist(self, edit, file_name, input_string):
        self._loadconfig()
        target = self._prepare()
        self.append_file(target['id'], file_name, input_string)
        to_url = target['html_url']

        # browser open!
        config_browser = settings.get('browser')

        if config_browser and config_browser != 'default':
            cmd = '"%s" %s' % (config_browser, to_url)
            if sys.platform == 'darwin':
                cmd = "open -a %s" % cmd
            result = os.system(cmd)
            if result != 0:
                sublime.error_message(
                    'cannot execute "%s" Please check your settings' % config_browser)
            else:
                sublime.status_message('Markdown preview launched in %s' % config_browser)
        else:
            desktop.open(to_url)
            sublime.status_message('Markdown preview launched in default html viewer')

    def goto_gist_auto(self, edit):
        encoding = self.getEncoding()
        # get selections
        in_selection = False
        input_string = b''
        for region in self.view.sel():
            if not region.empty():
                contents = self.view.substr(region)
                input_string += contents.encode(encoding)
                in_selection = True

        # not selection? -> all selection
        if len(input_string) < 1:
            region_all = sublime.Region(0, self.view.size())
            contents = self.view.substr(region_all)
            input_string = contents.encode(encoding)

        self.goto_gist(edit,
                       self.process_filename(None if in_selection else self.view.file_name()),
                       input_string)

    def goto_gist_sel(self, edit):
        encoding = self.getEncoding()
        # get selections
        input_string = ""
        for region in self.view.sel():
            if not region.empty():
                contents = self.view.substr(region)
                input_string += contents.encode(encoding)

        # not selection? -> all selection
        if len(input_string) < 1:
            sublime.error_message("error no selections!")

        self.goto_gist(edit, self.process_filename(None), input_string)

    def goto_gist_all(self, edit):
        encoding = self.getEncoding()
        region_all = sublime.Region(0, self.view.size())
        contents = self.view.substr(region_all)
        input_string = contents.encode(encoding)
        self.goto_gist(edit, self.process_filename(self.view.file_name()), input_string)

    def run(self, edit, **args):
        for k, v in args.items():
            if k == 'target' and v == 'all':
                self.goto_gist_all(edit)
                return
            elif k == 'target' and v == 'sel':
                self.goto_gist_sel(edit)
                return

        self.goto_gist_auto(edit)
